name: Drift Detection, Remediation & AI Intelligence

on:
  schedule:
    - cron: "0 */3 * * *"   # Runs every 3 hours
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  drift:
    name: Drift Detection & Auto-Remediation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.7

      - name: Terraform Init
        run: terraform init -reconfigure
        env:
          ARM_USE_OIDC: 'true'
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Conftest (OPA)
        run: |
          CONFTEST_VERSION=0.52.0
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz -o conftest.tgz
          tar -xzf conftest.tgz
          sudo mv conftest /usr/local/bin/
          conftest --version

      - name: Run Drift Detection & Auto-Remediation
        run: bash scripts/drift-check.sh
        env:
          ARM_USE_OIDC: 'true'
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload drift logs
        uses: actions/upload-artifact@v4
        with:
          name: drift-logs
          path: data/
          if-no-files-found: warn

  ai-drift:
    name: AI Drift Classification
    runs-on: ubuntu-latest
    needs: drift
    if: ${{ always() }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download drift logs
        uses: actions/download-artifact@v4
        with:
          name: drift-logs
          path: data/

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir pandas scikit-learn joblib

      - name: Validate drift logs
        run: |
          echo "Checking for drift feature data..."
          if [ ! -f "data/drift_results.json" ] && [ ! -f "data/drift_features.csv" ]; then
            echo "‚ö†Ô∏è No drift results found. Skipping AI classification."
            exit 0
          fi

      - name: Extract drift features
        run: python scripts/extract_drift_features.py

      - name: Train AI drift model
        run: python scripts/train_drift_model.py

      - name: Run AI Drift Risk Classifier
        run: python scripts/infer_drift_risk.py
        continue-on-error: true

      - name: Auto-remediate if risky drift detected
        if: failure()  # only runs if infer_drift_risk.py exits with 1
        run: |
          echo "üö® Triggering auto-remediation due to high-risk drift..."
          terraform apply -auto-approve
